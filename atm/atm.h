/*
 * The ATM interfaces with the user.  User commands should be
 * handled by atm_process_command.
 *
 * The ATM can read .card files, but not .pin files.
 *
 * Feel free to update the struct and the processing as you desire
 * (though you probably won't need/want to change send/recv).
 */

#ifndef __ATM_H__
#define __ATM_H__

#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>

// for encrypt/decrypt
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <string.h>

typedef struct _ATM
{
    // Networking state
    int sockfd;
    struct sockaddr_in rtr_addr;
    struct sockaddr_in atm_addr;

    // Protocol state
    // TODO add more, as needed
	char *logged_in;
    uint64_t p, g;
    unsigned char *key;
    int attempts, max_attempts, to_min;
    
} ATM;

ATM* atm_create();
void atm_free(ATM *atm);
ssize_t atm_send(ATM *atm, unsigned char  *data, size_t data_len);
ssize_t atm_recv(ATM *atm, unsigned char  *data, size_t max_data_len);
void atm_process_command(ATM *atm, char *command);
void handleErrors(void);


/* First, check it file.atm is correct and can be open, ./atm was called correctly, etc... 
 * If so return 0 and  show prompt and continue program. Else, return 64 and show err_msg */

int check_file(ATM *atm, char *filename);


/* Check command is a proper and correct command. If it is not, show err_msg and go back to ask for
 * new command. Else, continue proccessing the command.
 * Also, it maps a command to a number [1,2,3,4] so we can do a switch case op on it afterwards
 * If the command has some extra info it returns it in *input, for example begin-session <name>
 * It returns -1 if it fails, or number if it succeeds.*/

int check_command(ATM *atm, char *command, char *input);


/* Check user-name provided. If its a valid username continue. Else, return and print err_msg
 * Return 0 if its good, return -1 if it is bad.
 * Asks bank if that user exists in database, bank answers wether it is or not.*/

int check_user_name(ATM *atm, char *user_name);


/* Now, proccess the command knowing it is a valid input. Check atm.md to see specifics.
 * Return 0 if succesful, changes prompt, updates logged_in variable. 
 * Else, returns -1 and shows err_msg */

int begin_session(ATM *atm, char *user_name); 


/* First, check amt is a valid amt (See atm.md). If it is a valid input return amount , else return -1.*/

int check_amt(ATM *atm, char *amount); 


/* Now, proccess the command knowing it is a valid input. Check atm.md to see specifics.
 * Return 0 if succesful . Else, returns -1 and shows err_msg 
 * Asks the bank if the valid operation is possible, and tells it how much is withdrawn so the bank can
 * update the user's account. If bank answers that is an invalid op, fail (i.e: insufficient founds)*/

int withdraw(ATM *atm, int amt);


/* Proccess the command knowing it is a valid input. Check atm.md to see specifics.
 * Return 0 if succesful . Else, returns -1 and shows err_msg 
 * Asks bank for the needed information, bank answers with the information to show.*/

int balance(ATM *atm);


/* Proccess the command knowing it is a valid input. Check atm.md to see specifics.
 * Return 0 if succesful, clear the logged_in variable. Else, returns -1 and shows err_msg */

int end_session(ATM *atm);


/* Stars playing diffie hellman protocol with bank. */

int diffie_hellman(ATM *atm);


/* Sets bank and atm into init state for diffie hellman protocol and fires up the exchange of messages. */

int begin_diffie_hellman(ATM *atm);


/* Encrypts given plaintext using key generated by diffie hellman protocol with bank using AES-256 Encryption with streaming type: CBC*/

int encrypt(unsigned char *plaintext, int plaintext_len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext);


/* Reverses encryption with key generated in diffie hellman protocol of given ciphertext encrypted with AES-256 Encryption and streaming type: CBC*/

int decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key, unsigned char *iv, unsigned char *plaintext);


/* Reads pin in and hides it behind '*'. */

int getPIN(char *pin);


/* Hashes given message using SHA256. */

void digest_message(const unsigned char *message, size_t message_len, unsigned char **digest, unsigned int *digest_len);


/* Converts hash binary data into string representation. */

void string_digest(unsigned char * hash, char * output);

#endif

